"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mockDateClass = void 0;
var _date = require("./date");
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } /**
 * Created by hustcc 18/05/27.
 * Contract: i@hust.cc
 */
var mockDateClass = exports.mockDateClass = function mockDateClass(D) {
  // if undefined, use real date, or else mock date
  var mockNow = function mockNow() {
    return (0, _date.now)() === undefined ? D.now() : (0, _date.now)();
  };
  function Date() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var dateArgs = args.length === 0 ? [mockNow()] : args;
    var instance = _construct(D, _toConsumableArray(dateArgs));
    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    instance.constructor = Date;
    return instance;
  }
  Date.prototype = Object.create(D.prototype);
  Object.setPrototypeOf(Date, D);

  // undefined means do not mock date
  Date.now = function () {
    return mockNow();
  };
  // original Date class
  Date.__OriginalDate__ = D;
  // current() is for test.
  Date.current = function () {
    return D.now();
  };
  return Date;
};